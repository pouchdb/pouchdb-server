"use strict";

var express  = require('express');
var favicon  = require('serve-favicon');
var path     = require('path');
var mkdirp   = require('mkdirp');
var nomnom   = require('@gerhobbelt/nomnom');
var wordwrap = require('wordwrap');
var killable = require('killable');
var tailLog  = require('./logging');
var cors     = require('./cors');
var Promise  = require('pouchdb-promise');
var customLevelAdapter = require('./customLevelAdapter');

var PouchDB  = require('pouchdb-core')
  .plugin(require('pouchdb-adapter-http'))
  .plugin(require('pouchdb-replication'))
  .plugin(require('pouchdb-mapreduce'));

// parse command line arguments

var options = {
  port: {
    abbr: 'p',
    info: "Port on which to run the server.",
    couchName: ['httpd', 'port'],
    couchDefault: process.env.PORT || 5984,
    onChange: rebind
  },
  dir: {
    abbr: 'd',
    info: "Where to store database files.",
    couchName: ['couchdb', 'database_dir'],
    couchDefault: './',
    couchDefaultAlias: 'the current directory',
    onChange: updatePouchDB
  },
  config: {
    abbr: 'c',
    info: "The location of the configuration file that backs /_config.",
    ultimateDefault: './config.json'
  },
  host: {
    abbr: 'o',
    info: "The address to bind the server to.",
    couchName: ['httpd', 'bind_address'],
    couchDefault: '127.0.0.1',
    onChange: rebind
  },
  'in-memory': {
    abbr: 'm',
    info: "Use a pure in-memory database which will be deleted upon restart.",
    flag: true,
    couchName: ['pouchdb_server', 'in_memory'],
    couchDefault: false,
    onChange: updatePouchDB
  },
  'sqlite': {
    info: "Use PouchDB over SQLite instead of LevelDOWN",
    flag: true,
    couchName: ['pouchdb_server', 'sqlite'],
    couchDefault: false,
    onChange: updatePouchDB
  },
  proxy: {
    abbr: 'r',
    info: "Proxy requests to the specified host. Include a trailing '/'.",
    couchName: ['pouchdb_server', 'proxy'],
    onChange: updatePouchDB
  },
  'no-stdout-logs': {
    abbr: 'n',
    info: "Stops the log file from also being written to stdout.",
    flag: true,
    couchName: ['pouchdb_server', 'no-stdout-logs'],
    couchDefault: false,
    onChange: restartTailingLog
  },
  'no-color': {
    // this option is handled by the 'colors' node module. It's just
    // here so it shows up in --help
    flag: true,
    help: terminalWrap("Disable coloring of logging output.")
  },
  'level-backend': {
    info: (
      "Advanced - Alternate LevelDOWN backend (e.g. memdown, " +
      "riakdown, redisdown). Note that you'll need to manually npm " +
      "install it first."
    ),
    couchName: ['pouchdb_server', 'level_backend'],
    onChange: updatePouchDB
  },
  'level-prefix': {
    info: (
      "Advanced - Prefix to use for all database names, useful for " +
      "URLs in alternate backends, e.g. riak://localhost:8087/ for " +
      "riakdown."
    ),
    couchName: ['pouchdb_server', 'level_prefix'],
    onChange: updatePouchDB
  }
};

function terminalWrap(text) {
  // 26 chars from the left of the terminal might change when new
  // options are added
  return wordwrap(26, 80)(text).trim();
}

Object.keys(options).forEach(function (key) {
  var option = options[key];
  if (!option.help) {
    var d;
    if (option.couchName) {
      d = "/_config/" + option.couchName.join("/")+ " which defaults to ";
      d += option.couchDefaultAlias || option.couchDefault;
    } else {
      d = option.ultimateDefault;
    }
    option.help = terminalWrap(option.info + " (Defaults to " + d + ").");
  }
});

var args = nomnom
  .script('pouchdb-server')
  .options(options)
  .help([
    "Examples:",
    "",
    "  pouchdb-server --level-backend riakdown --level-prefix " +
    "riak://localhost:8087",
    [
      "  Starts up a pouchdb-server that talks to Riak.",
      "  Requires: npm install riakdown"
    ].join('\n'),
    "",
    "  pouchdb-server --level-backend redisdown",
    [
      "  Starts up a pouchdb-server that talks to Redis, on localhost:6379.",
      "  Requires: npm install redisdown"
    ].join('\n'),
    "",
    "  pouchdb-server --sqlite",
    [
      "  Starts up a pouchdb-server using SQLite"
    ].join('\n')
  ].join('\n'))
  .nocolors()
  .parse();

// build app

var app = express();

var pouchDBApp = require('express-pouchdb')({
  configPath: getArg('config')
});

function getArg(name) {
  if (options[name].couchName) {
    return args[name] || config.get.apply(config, options[name].couchName);
  } else {
    return args[name] || options[name].ultimateDefault;
  }
}

var config = pouchDBApp.couchConfig;
var logger = pouchDBApp.couchLogger;

// register defaults & change listeners
Object.keys(options).forEach(function (key) {
  var option = options[key];

  if (typeof option.couchDefault !== 'undefined') {
    var args = option.couchName.concat([option.couchDefault]);
    config.registerDefault.apply(config, args);
  }
  if (option.onChange) {
    config.on(option.couchName.join('.'), option.onChange);
  }
});

// favicon
app.use(favicon(__dirname + '/../favicon.ico'));

// logging
var stopTailingLog, loggingReady;

function restartTailingLog() {
  if (stopTailingLog) {
    stopTailingLog();
    stopTailingLog = undefined;
  }
  if (getArg('no-stdout-logs')) {
    loggingReady = Promise.resolve();
  } else {
    loggingReady = tailLog(config.get('log', 'file')).then(function (stop) {
      stopTailingLog = stop;
    });
  }
}

config.on('log.file', restartTailingLog);
restartTailingLog();

// cors
app.use(cors(config));

// determine PouchDB instance
function updatePouchDB() {
  var opts = {};

  opts.prefix = path.resolve(getArg('dir')) + path.sep;
  mkdirp.sync(opts.prefix);

  if (getArg('level-prefix')) {
    opts.prefix = getArg('level-prefix');
  }
  if (getArg('in-memory')) {
    PouchDB.plugin(require('pouchdb-adapter-memory'));
  } else if (getArg('level-backend')) {
    PouchDB.plugin(customLevelAdapter(require(getArg('level-backend'))));
    opts.url = process.env.LEVEL_DOWN_URL; // example could be the redis url
  } else if (getArg('sqlite')) {
    PouchDB.plugin(require('pouchdb-adapter-node-websql'));
  } else {
    PouchDB.plugin(require('pouchdb-adapter-leveldb'));
  }

  var ThisPouchDB;
  if (getArg('proxy')) {
    ThisPouchDB = require('http-pouchdb')(PouchDB, getArg('proxy'));
  } else {
    ThisPouchDB = PouchDB.defaults(opts);
  }
  pouchDBApp.setPouchDB(ThisPouchDB);
}

updatePouchDB();

app.use(pouchDBApp);

// handle listening
var server;

function listen() {
  loggingReady.then(listenImpl);
}

function listenImpl() {
  var host = getArg('host');
  var port = getArg('port');
  if (typeof port !== 'number') {
    logger.warning("port must be an integer.");
    port = options.port.couchDefault;
  }

  server = app.listen(port, host, function () {
    var address = 'http://' + host + ':' + port + '/';
    logger.info('pouchdb-server has started on ' + address);
    if (getArg('proxy')) {
      logger.info('database is a proxy to ' + getArg('proxy'));
    } else if (getArg('in-memory')) {
      logger.info('database is in-memory; no changes will be saved.');
    } else if (getArg('sqlite')) {
      logger.info('database will use sqlite3.');
    }
    if (getArg('dir') !== options.dir.couchDefault) {
      logger.info('database files will be saved to ' + getArg('dir'));
    }
    if (getArg('level-backend')) {
      logger.info('using alternative backend: ' + getArg('level-backend'));
    }
    var prefix = getArg('level-prefix');
    if (prefix) {
      logger.info('all databases will be created with prefix: ' + prefix);
    }
    var fauxtonUrl = address + '_utils';
    logger.info('navigate to ' + fauxtonUrl + ' for the Fauxton UI.');
  });
  killable(server);

  server.on('error', function (e) {
    stopTailingLog();
    if (e.code === 'EADDRINUSE') {
      console.error('Error: Port ' + port + ' is already in use.');
      console.error('Try another one, e.g. pouchdb-server -p ' +
        (parseInt(port) + 1));
    } else {
      console.error('Uncaught error: ' + e);
      console.error(e.stack);
    }
  });
}

function rebind() {
  server.kill(listen);
}

listen();

// handle exit

process.on('SIGINT', function () {
  process.exit(0);
});
