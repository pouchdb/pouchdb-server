#!/usr/bin/env node

"use strict";

var express  = require('express'),
    auth     = require('basic-auth'),
    corser   = require('corser'),
    favicon  = require('serve-favicon'),
    path     = require('path'),
    mkdirp   = require('mkdirp'),
    nomnom   = require('nomnom'),
    wordwrap = require('wordwrap');

var loggerModes = ['dev', 'short', 'tiny', 'combined', 'off'];

function terminalWrap(text) {
  // 21 chars from the left of the terminal might change when new
  // options are added
  return wordwrap(21, 80)(text).trim();
}

var options = {
  port: {
    abbr: 'p',
    help: terminalWrap("Port on which to run the server."),
    default: 5984,
    callback: function(port) {
      if (port !== parseInt(port).toString()) {
        return "port must be an integer";
      }
    }
  },
  dir: {
    abbr: 'd',
    help: terminalWrap("Where to store database files. (Defaults to /_config/couchdb/database_dir which defaults to the current directory).")
  },
  config: {
    abbr: 'c',
    help: terminalWrap("The location of the configuration file that backs /_config."),
    default: './config.json'
  },
  inMemory: {
    abbr: 'm',
    full: 'in-memory',
    flag: 'true',
    help: terminalWrap("Use a pure in-memory database (will be deleted upon restart!)")
  },
  logger: {
    abbr: 'l',
    default: 'dev',
    choices: loggerModes,
    help: terminalWrap("Output log format (" + loggerModes.join('|') + ")")
  },
  user: {
    abbr: 'u',
    help: terminalWrap("Set Basic Auth username. (Both user and pass required for Basic Auth).")
  },
  pass: {
    abbr: 's',
    help: terminalWrap("Set Basic Auth password. (Both user and pass required for Basic Auth).")
  },
  levelBackend: {
    full: 'level-backend',
    help: terminalWrap("Advanced - Alternate LevelDOWN backend (e.g. memdown, riakdown, redisdown) Note that you'll need to manually npm install it first.")
  },
  levelPrefix: {
    full: 'level-prefix',
    help: terminalWrap("Advanced - Prefix to use for all database names, useful for URLs in alternate backends, e.g. riak://localhost:8087/ for riakdown.")
  }
};

var args = nomnom
  .options(options)
  .script('pouchdb-server')
  .help([
    "Examples:",
    "",
    "  pouchdb-server --level-backend riakdown --level-prefix riak://localhost:8087",
    "  Starts up a pouchdb-server that talks to Riak.",
    "",
    "  pouchdb-server --level-backend redis",
    "  Starts up a pouchdb-server that talks to Redis, on localhost:6379",
    "",
    "  pouchdb-server --level-backend sqldown --level-prefix /tmp/",
    "  Starts up a pouchdb-server that uses SQLite, with db files stored in /tmp/"
  ].join('\n'))
  .nocolors()
  .parse();

args.useAuth = args.user && args.pass;

var app = express();
app.use(favicon(__dirname + '/../favicon.ico'));

if (args.logger !== 'off') {
  app.use(require('morgan')(args.logger));
}

if (args.useAuth) {
  app.use(function (req, res, next) {
    // Default read-only
    if (req.user || req.method === 'GET') {
      return next();
    }
    // Otherwise authenticate
    var creds = auth(req);
    if (creds && creds.name === args.user && creds.pass === args.pass) {
      return next();
    }
    res.send(401);
  });
}

var pouchDBApp = require('express-pouchdb')({
  configPath: args.config
});
var config = pouchDBApp.couchConfig;

var corsMiddleware;
function corsChanged() {
  if (config.get('httpd', 'enable_cors')) {
    var origins = config.get('cors', 'origins');
    if (origins === '*') {
      origins = undefined;
    }
    if (origins) {
      origins = origins.split(', ');
    }

    corsMiddleware = corser.create({
      methods: config.get('cors', 'methods').split(', '),
      supportsCredentials: config.get('cors', 'credentials'),
      requestHeaders: config.get('cors', 'headers').split(', '),
      origins: origins
    });
  } else {
    corsMiddleware = null;
  }
}

[
  ['httpd', 'enable_cors', true],
  ['cors', 'credentials', true],
  ['cors', 'methods', 'GET, HEAD, POST, PUT, DELETE, COPY'],
  ['cors', 'origins', '*'],
  ['cors', 'headers', corser.simpleRequestHeaders.concat([
    'Authorization', 'Origin', 'Referer'
  ]).join(', ')],
].forEach(function (info) {
  config.registerDefault.apply(config, info);
  config.on(info[0] + '.' + info[1], corsChanged);
});
corsChanged();

app.use(function (req, res, next) {
  if (!corsMiddleware) {
    return next();
  }
  return corsMiddleware(req, res, next);
});

function updatePouchDB() {
  var opts = {};

  var dir = config.get('couchdb', 'database_dir') || args.dir;
  opts.prefix = path.resolve(dir) + path.sep;
  mkdirp.sync(opts.prefix);

  if (args.levelPrefix) {
    opts.prefix = args.levelPrefix;
  }
  if (args.inMemory) {
    opts.db = require('memdown');
  } else if (args.levelBackend) {
    opts.db = require(args.levelBackend);
  }

  var PouchDB = require('pouchdb').defaults(opts);
  pouchDBApp.setPouchDB(PouchDB);
}
config.registerDefault('couchdb', 'database_dir', './');
config.on('couchdb.database_dir', updatePouchDB);

updatePouchDB();

app.use(pouchDBApp);
app.listen(args.port, function () {
  console.log('\npouchdb-server listening on port ' + args.port + '.');
  if (args.inMemory) {
    console.log('database is in-memory; no changes will be saved.');
  } else if (args.dir) {
    console.log('database files will be saved to ' + args.dir);
  }
  if (args.levelBackend) {
    console.log('using alternative backend: ' + args.levelBackend);
  }
  if (args.levelPrefix) {
    console.log('all databases will be created with prefix: ' + args.levelPrefix);
  }
  var fauxtonUrl = 'http://localhost:' + args.port + '/_utils';
  console.log('\nnavigate to ' + fauxtonUrl + ' for the Fauxton UI.\n');
}).on('error', function (e) {
  if (e.code === 'EADDRINUSE') {
    console.error('\nError: Port ' + args.port + ' is already in use.');
    console.error('Try another one, e.g. pouchdb-server -p ' +
      (parseInt(args.port) + 1) + '\n');
  } else {
    console.error('Uncaught error: ' + e);
    console.error(e.stack);
  }
});

process.on('SIGINT', function () {
  process.exit(0);
});
